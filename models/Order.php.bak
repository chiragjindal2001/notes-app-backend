<?php
class Order
{
    private $conn;
    public function __construct($conn)
    {
        $this->conn = $conn;
    }

    public function create($orderData, $items)
    {
        pg_query($this->conn, 'BEGIN');
        $sql = 'INSERT INTO orders (order_id, customer_email, customer_name, total_amount, status, razorpay_order_id, user_id, created_at) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW()) RETURNING id, order_id';
        $params = [
            $orderData['order_id'],
            $orderData['customer_email'],
            $orderData['customer_name'],
            $orderData['total_amount'],
            $orderData['status'],
            $orderData['razorpay_order_id'] ?? null,
            isset($orderData['user_id']) ? $orderData['user_id'] : null
        ];
        $result = pg_query_params($this->conn, $sql, $params);
        $order = pg_fetch_assoc($result);
        $order_id = $order['id'];
        foreach ($items as $item) {
            $itemSql = 'INSERT INTO order_items (order_id, note_id, quantity) VALUES ($1, $2, $3)';
            pg_query_params($this->conn, $itemSql, [$order_id, $item['note_id'], $item['quantity']]);
        }
        pg_query($this->conn, 'COMMIT');
        return $order;
    }

    public function getById($order_id)
    {
        $stmt = pg_query_params('SELECT * FROM orders WHERE order_id = :oid');
        $stmt->execute([':oid' => $order_id]);
        $order = $stmt->fetch();
        if (!$order) return null;
        $itemStmt = pg_query_params('SELECT oi.note_id, n.title, n.price, oi.quantity FROM order_items oi JOIN notes n ON oi.note_id = n.id WHERE oi.order_id = (SELECT id FROM orders WHERE order_id = :oid)');
        $itemStmt->execute([':oid' => $order_id]);
        $order['items'] = $itemStmt->fetchAll();
        return $order;
    }

    public function list($filters = [], $pagination = [], $sort = [])
    {
        $where = [];
        $params = [];
        if (!empty($filters['status'])) {
            $where[] = 'status = :status';
            $params[':status'] = $filters['status'];
        }
        if (!empty($filters['email'])) {
            $where[] = 'customer_email ILIKE :email';
            $params[':email'] = '%' . $filters['email'] . '%';
        }
        $sql = 'SELECT * FROM orders';
        if ($where) {
            $sql .= ' WHERE ' . implode(' AND ', $where);
        }
        $order = 'created_at DESC';
        $sql .= ' ORDER BY ' . $order;
        $limit = (int)($pagination['limit'] ?? 20);
        $offset = (int)($pagination['offset'] ?? 0);
        $sql .= ' LIMIT :limit OFFSET :offset';
        $params[':limit'] = $limit;
        $params[':offset'] = $offset;
        $stmt = pg_query_params($sql);
        foreach ($params as $k => $v) {
            if ($k === ':limit' || $k === ':offset') {
                $stmt->bindValue($k, $v, PDO::PARAM_INT);
            } else {
                $stmt->bindValue($k, $v);
            }
        }
        $stmt->execute();
        return $stmt->fetchAll();
    }

    public function updateStatus($order_id, $status)
    {
        $stmt = pg_query_params('UPDATE orders SET status = :status WHERE order_id = :oid RETURNING order_id, status');
        $stmt->execute([':status' => $status, ':oid' => $order_id]);
        return $stmt->fetch();
    }

    public function refund($order_id, $amount, $reason = null)
    {
        // Razorpay refund logic would go here.
        // For now, just a stub.
        return [
            'order_id' => $order_id,
            'amount' => $amount,
            'reason' => $reason,
            'status' => 'refunded',
            'refund_id' => uniqid('refund_')
        ];
    }
}
